{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "50J9CIeBK7P8"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kevinhhl/portfolio-management-tools/blob/main/Fix%3A%20typo%20in%20the%20legend%20of%20matplotlib%20plot%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Parameters**"
      ],
      "metadata": {
        "id": "sMRzBATbNTdg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ticker                        = \"TSLA\"\n",
        "hist_yyyy, hist_mm, hist_dd   = 2020, 1, 1            # start date, historical lookback\n",
        "t0_yyyy, t0_mm, t0_dd         = 2022, 12, 31          # [t0] end date for historical lookback, and start date for simulations\n",
        "tn_yyyy, tn_mm, tn_dd         = 2023, 3, 31           # [tn] end date for simulations (no. of periods to be determined based on no. of business days in between t0 and tn)\n",
        "n_iters                       = 1000000               # No. of iterations for MCS\n"
      ],
      "metadata": {
        "id": "0vO9_Z8bvJAE"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Overview:\n",
        "This script will obtain historical price data from Yahoo and then perform a Monte Carlo Simulation by doing a random walk to forecast the reasonable ranges of prices.\n"
      ],
      "metadata": {
        "id": "Z-XvJ4EtSMYt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import date\n",
        "import time\n",
        "from pandas.tseries.offsets import BDay\n",
        "from scipy.stats import norm\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sb"
      ],
      "metadata": {
        "id": "Re9QhN_R0axO"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Number of iterations should be at least 500, and 800, in order for forecasted mean and standard deviation values (respectively) to converge. [1]\n",
        "\n"
      ],
      "metadata": {
        "id": "JTXRqMtPW5xV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "assert n_iters > 800"
      ],
      "metadata": {
        "id": "KkjNIe3oUiBB"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Processing source data:"
      ],
      "metadata": {
        "id": "50J9CIeBK7P8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Alternative to importing yfinance as yf\n",
        "def get_csv_link(date_from, date_to):\n",
        "  _date_from = time.mktime(date_from.timetuple())\n",
        "  _date_to = time.mktime(date_to.timetuple())\n",
        "  s1 = \"https://query1.finance.yahoo.com/v7/finance/download/\"\n",
        "  _s2 = str(int(_date_from))\n",
        "  _s3 = str(int(_date_to))\n",
        "  s4 = \"?period1=\"+ _s2 +\"&period2=\"+ _s3 +\"&interval=1d&events=history&includeAdjustedClose=true\"\n",
        "  return s1 + ticker + s4\n",
        "csv = pd.read_csv(get_csv_link(date(hist_yyyy, hist_mm, hist_dd), date(t0_yyyy, t0_mm, t0_dd)))\n",
        "csv"
      ],
      "metadata": {
        "id": "kIZpItrGM8ZI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "260ea236-f49c-46a0-addc-154e2c4b75bc"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Date        Open        High         Low       Close   Adj Close  \\\n",
              "0    2020-01-02   28.299999   28.713333   28.114000   28.684000   28.684000   \n",
              "1    2020-01-03   29.366667   30.266666   29.128000   29.534000   29.534000   \n",
              "2    2020-01-06   29.364668   30.104000   29.333332   30.102667   30.102667   \n",
              "3    2020-01-07   30.760000   31.441999   30.224001   31.270666   31.270666   \n",
              "4    2020-01-08   31.580000   33.232666   31.215334   32.809334   32.809334   \n",
              "..          ...         ...         ...         ...         ...         ...   \n",
              "751  2022-12-23  126.370003  128.619995  121.019997  123.150002  123.150002   \n",
              "752  2022-12-27  117.500000  119.669998  108.760002  109.099998  109.099998   \n",
              "753  2022-12-28  110.349998  116.269997  108.239998  112.709999  112.709999   \n",
              "754  2022-12-29  120.389999  123.570000  117.500000  121.820000  121.820000   \n",
              "755  2022-12-30  119.949997  124.480003  119.750000  123.180000  123.180000   \n",
              "\n",
              "        Volume  \n",
              "0    142981500  \n",
              "1    266677500  \n",
              "2    151995000  \n",
              "3    268231500  \n",
              "4    467164500  \n",
              "..         ...  \n",
              "751  166989700  \n",
              "752  208643400  \n",
              "753  221070500  \n",
              "754  221923300  \n",
              "755  157777300  \n",
              "\n",
              "[756 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2cd622da-b530-4621-98b5-43cbc1095645\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-01-02</td>\n",
              "      <td>28.299999</td>\n",
              "      <td>28.713333</td>\n",
              "      <td>28.114000</td>\n",
              "      <td>28.684000</td>\n",
              "      <td>28.684000</td>\n",
              "      <td>142981500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-01-03</td>\n",
              "      <td>29.366667</td>\n",
              "      <td>30.266666</td>\n",
              "      <td>29.128000</td>\n",
              "      <td>29.534000</td>\n",
              "      <td>29.534000</td>\n",
              "      <td>266677500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-01-06</td>\n",
              "      <td>29.364668</td>\n",
              "      <td>30.104000</td>\n",
              "      <td>29.333332</td>\n",
              "      <td>30.102667</td>\n",
              "      <td>30.102667</td>\n",
              "      <td>151995000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-01-07</td>\n",
              "      <td>30.760000</td>\n",
              "      <td>31.441999</td>\n",
              "      <td>30.224001</td>\n",
              "      <td>31.270666</td>\n",
              "      <td>31.270666</td>\n",
              "      <td>268231500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-01-08</td>\n",
              "      <td>31.580000</td>\n",
              "      <td>33.232666</td>\n",
              "      <td>31.215334</td>\n",
              "      <td>32.809334</td>\n",
              "      <td>32.809334</td>\n",
              "      <td>467164500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>751</th>\n",
              "      <td>2022-12-23</td>\n",
              "      <td>126.370003</td>\n",
              "      <td>128.619995</td>\n",
              "      <td>121.019997</td>\n",
              "      <td>123.150002</td>\n",
              "      <td>123.150002</td>\n",
              "      <td>166989700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>752</th>\n",
              "      <td>2022-12-27</td>\n",
              "      <td>117.500000</td>\n",
              "      <td>119.669998</td>\n",
              "      <td>108.760002</td>\n",
              "      <td>109.099998</td>\n",
              "      <td>109.099998</td>\n",
              "      <td>208643400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>753</th>\n",
              "      <td>2022-12-28</td>\n",
              "      <td>110.349998</td>\n",
              "      <td>116.269997</td>\n",
              "      <td>108.239998</td>\n",
              "      <td>112.709999</td>\n",
              "      <td>112.709999</td>\n",
              "      <td>221070500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>754</th>\n",
              "      <td>2022-12-29</td>\n",
              "      <td>120.389999</td>\n",
              "      <td>123.570000</td>\n",
              "      <td>117.500000</td>\n",
              "      <td>121.820000</td>\n",
              "      <td>121.820000</td>\n",
              "      <td>221923300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>755</th>\n",
              "      <td>2022-12-30</td>\n",
              "      <td>119.949997</td>\n",
              "      <td>124.480003</td>\n",
              "      <td>119.750000</td>\n",
              "      <td>123.180000</td>\n",
              "      <td>123.180000</td>\n",
              "      <td>157777300</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>756 rows × 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2cd622da-b530-4621-98b5-43cbc1095645')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2cd622da-b530-4621-98b5-43cbc1095645 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2cd622da-b530-4621-98b5-43cbc1095645');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Historical Returns**\n",
        "\n",
        "*   pc = historical log returns, based on Adjusted Close\n",
        "*   drift = mean minus half-variance of historical log returns\n",
        "\n"
      ],
      "metadata": {
        "id": "snkHlG2mLDAE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "adj_close = csv[\"Adj Close\"]\n",
        "pc = np.log(1+adj_close.pct_change()) "
      ],
      "metadata": {
        "id": "dVWLT7zCv1Zj"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sb.histplot(pc.iloc[1:])\n",
        "plt.title(\"Historical Log Returns\")\n",
        "plt.xlabel(\"Log Returns (Daily)\")\n",
        "plt.ylabel(\"Frequency\");"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "Kh21PW0S1VqF",
        "outputId": "05f49bf2-2e5b-4a8f-c2c1-37931e9fab8f"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean = pc.mean()\n",
        "var = pc.var()\n",
        "stddev = pc.std()\n",
        "drift = mean - 0.5*var\n",
        "print(\"mean={}, var={}, drift={}\".format(mean, var, drift))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "opaF_hukxYAk",
        "outputId": "74857b9f-71a4-4bd2-e606-4057cae33a77"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mean=0.0019302082440245934, var=0.002069195148727386, drift=0.0008956106696609003\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Performing Random Walk"
      ],
      "metadata": {
        "id": "1OszZ2gFLWxy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "date_t0 = date(t0_yyyy, t0_mm, t0_dd)\n",
        "date_tn = date(tn_yyyy, tn_mm, tn_dd)\n",
        "\n",
        "n_forecast = 0        # Counter++ for each business days existing in between t0 and tn\n",
        "_t0 = date_t0         # tmp var.\n",
        "while date(_t0.year,_t0.month,_t0.day) <= date(date_tn.year,date_tn.month,date_tn.day):\n",
        "  n_forecast += 1\n",
        "  _t0 += BDay(1)"
      ],
      "metadata": {
        "id": "NYD2lruj7Xle"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Init. array[n_forecast][n_iters] of zeros \n",
        "rand_returns = np.exp(drift + stddev * norm.ppf(np.random.rand(n_forecast,n_iters)))\n",
        "sim_equity_curve = np.zeros_like(rand_returns)\n",
        "\n",
        "# Assume single asset porfolio. Value of portfolio on day 1 of forecast is the Adj. Close price on that date. \n",
        "sim_equity_curve[0] = adj_close[len(adj_close)-1]\n",
        "\n",
        "# Perform random walk and plot\n",
        "for t in range(1,n_forecast):\n",
        "    sim_equity_curve[t] = sim_equity_curve[t-1]*rand_returns[t]\n",
        "\n",
        "assert(sim_equity_curve.shape==rand_returns.shape)\n",
        "\n",
        "print(\"\\n{}\\nShape={}\".format(ticker, sim_equity_curve.shape))\n",
        "print(\"Simulation: From {} to {}; Business days={}\".format(date_t0, date_tn, np.busday_count(date_t0, date_tn)))\n",
        "\n",
        "## Showing random paths \n",
        "## Took it out because matplotlib becomes slow when n_iteration is large \n",
        "# plt.figure(figsize=(20,10))\n",
        "# plt.plot(pd.DataFrame(sim_equity_curve).iloc[:,0:]);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SGGj1CEFzC56",
        "outputId": "8821cd90-c63c-444d-d199-8ce29a85900f"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "TSLA\n",
            "Shape=(66, 1000000)\n",
            "Simulation: From 2022-12-31 to 2023-03-31; Business days=64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "count = 0\n",
        "stdev_multi = 2\n",
        "\n",
        "lower_bounds, center_ln, upper_bounds = [], [], []\n",
        "\n",
        "print(\"{}\\nt+n; \\t\\t\\t\\tstd \\t\\tmean \\t\\tmean - {}*std \\t\\tmean + {}*std \\n\"\\\n",
        "      .format(ticker, stdev_multi,stdev_multi))\n",
        "for e in sim_equity_curve:\n",
        "  std = e.std()\n",
        "  mean = e.mean()\n",
        "  lower_bounds.append(mean-2*std)\n",
        "  center_ln.append(mean)\n",
        "  upper_bounds.append(mean+2*std)\n",
        "  print(\"t+{} \\t{} \\tstd = {} \\tmean = {} \\tlower = {} \\t\\tupper = {}\"\\\n",
        "        .format(count, date_t0+BDay(count), std.round(2), mean.round(2), (mean-stdev_multi*std).round(2), (mean+stdev_multi*std).round(2)))\n",
        "  count += 1\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tkvONumF_RF-",
        "outputId": "e90daa70-1329-4a57-d551-7802b29fe9e8"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TSLA\n",
            "t+n; \t\t\t\tstd \t\tmean \t\tmean - 2*std \t\tmean + 2*std \n",
            "\n",
            "t+0 \t2023-01-02 00:00:00 \tstd = 0.0 \tmean = 123.18 \tlower = 123.18 \t\tupper = 123.18\n",
            "t+1 \t2023-01-02 00:00:00 \tstd = 5.62 \tmean = 123.42 \tlower = 112.19 \t\tupper = 134.66\n",
            "t+2 \t2023-01-03 00:00:00 \tstd = 7.96 \tmean = 123.66 \tlower = 107.75 \t\tupper = 139.57\n",
            "t+3 \t2023-01-04 00:00:00 \tstd = 9.77 \tmean = 123.89 \tlower = 104.36 \t\tupper = 143.42\n",
            "t+4 \t2023-01-05 00:00:00 \tstd = 11.3 \tmean = 124.13 \tlower = 101.52 \t\tupper = 146.73\n",
            "t+5 \t2023-01-06 00:00:00 \tstd = 12.68 \tmean = 124.37 \tlower = 99.01 \t\tupper = 149.72\n",
            "t+6 \t2023-01-09 00:00:00 \tstd = 13.91 \tmean = 124.6 \tlower = 96.78 \t\tupper = 152.42\n",
            "t+7 \t2023-01-10 00:00:00 \tstd = 15.06 \tmean = 124.84 \tlower = 94.71 \t\tupper = 154.96\n",
            "t+8 \t2023-01-11 00:00:00 \tstd = 16.14 \tmean = 125.08 \tlower = 92.79 \t\tupper = 157.37\n",
            "t+9 \t2023-01-12 00:00:00 \tstd = 17.16 \tmean = 125.32 \tlower = 91.0 \t\tupper = 159.64\n",
            "t+10 \t2023-01-13 00:00:00 \tstd = 18.14 \tmean = 125.55 \tlower = 89.27 \t\tupper = 161.84\n",
            "t+11 \t2023-01-16 00:00:00 \tstd = 19.07 \tmean = 125.8 \tlower = 87.65 \t\tupper = 163.95\n",
            "t+12 \t2023-01-17 00:00:00 \tstd = 19.97 \tmean = 126.04 \tlower = 86.11 \t\tupper = 165.97\n",
            "t+13 \t2023-01-18 00:00:00 \tstd = 20.84 \tmean = 126.3 \tlower = 84.62 \t\tupper = 167.97\n",
            "t+14 \t2023-01-19 00:00:00 \tstd = 21.68 \tmean = 126.54 \tlower = 83.18 \t\tupper = 169.9\n",
            "t+15 \t2023-01-20 00:00:00 \tstd = 22.5 \tmean = 126.78 \tlower = 81.78 \t\tupper = 171.78\n",
            "t+16 \t2023-01-23 00:00:00 \tstd = 23.3 \tmean = 127.02 \tlower = 80.42 \t\tupper = 173.62\n",
            "t+17 \t2023-01-24 00:00:00 \tstd = 24.07 \tmean = 127.26 \tlower = 79.11 \t\tupper = 175.41\n",
            "t+18 \t2023-01-25 00:00:00 \tstd = 24.84 \tmean = 127.51 \tlower = 77.82 \t\tupper = 177.19\n",
            "t+19 \t2023-01-26 00:00:00 \tstd = 25.58 \tmean = 127.75 \tlower = 76.6 \t\tupper = 178.91\n",
            "t+20 \t2023-01-27 00:00:00 \tstd = 26.3 \tmean = 128.0 \tlower = 75.39 \t\tupper = 180.6\n",
            "t+21 \t2023-01-30 00:00:00 \tstd = 27.01 \tmean = 128.25 \tlower = 74.23 \t\tupper = 182.27\n",
            "t+22 \t2023-01-31 00:00:00 \tstd = 27.72 \tmean = 128.5 \tlower = 73.06 \t\tupper = 183.93\n",
            "t+23 \t2023-02-01 00:00:00 \tstd = 28.41 \tmean = 128.75 \tlower = 71.93 \t\tupper = 185.57\n",
            "t+24 \t2023-02-02 00:00:00 \tstd = 29.09 \tmean = 128.99 \tlower = 70.81 \t\tupper = 187.16\n",
            "t+25 \t2023-02-03 00:00:00 \tstd = 29.76 \tmean = 129.24 \tlower = 69.72 \t\tupper = 188.77\n",
            "t+26 \t2023-02-06 00:00:00 \tstd = 30.43 \tmean = 129.49 \tlower = 68.63 \t\tupper = 190.35\n",
            "t+27 \t2023-02-07 00:00:00 \tstd = 31.08 \tmean = 129.72 \tlower = 67.57 \t\tupper = 191.88\n",
            "t+28 \t2023-02-08 00:00:00 \tstd = 31.73 \tmean = 129.97 \tlower = 66.52 \t\tupper = 193.43\n",
            "t+29 \t2023-02-09 00:00:00 \tstd = 32.36 \tmean = 130.22 \tlower = 65.49 \t\tupper = 194.95\n",
            "t+30 \t2023-02-10 00:00:00 \tstd = 33.01 \tmean = 130.47 \tlower = 64.44 \t\tupper = 196.5\n",
            "t+31 \t2023-02-13 00:00:00 \tstd = 33.63 \tmean = 130.72 \tlower = 63.46 \t\tupper = 197.99\n",
            "t+32 \t2023-02-14 00:00:00 \tstd = 34.25 \tmean = 130.97 \tlower = 62.46 \t\tupper = 199.48\n",
            "t+33 \t2023-02-15 00:00:00 \tstd = 34.87 \tmean = 131.22 \tlower = 61.48 \t\tupper = 200.97\n",
            "t+34 \t2023-02-16 00:00:00 \tstd = 35.47 \tmean = 131.47 \tlower = 60.53 \t\tupper = 202.42\n",
            "t+35 \t2023-02-17 00:00:00 \tstd = 36.08 \tmean = 131.73 \tlower = 59.57 \t\tupper = 203.9\n",
            "t+36 \t2023-02-20 00:00:00 \tstd = 36.69 \tmean = 131.99 \tlower = 58.6 \t\tupper = 205.37\n",
            "t+37 \t2023-02-21 00:00:00 \tstd = 37.3 \tmean = 132.26 \tlower = 57.66 \t\tupper = 206.85\n",
            "t+38 \t2023-02-22 00:00:00 \tstd = 37.89 \tmean = 132.51 \tlower = 56.72 \t\tupper = 208.29\n",
            "t+39 \t2023-02-23 00:00:00 \tstd = 38.49 \tmean = 132.76 \tlower = 55.78 \t\tupper = 209.74\n",
            "t+40 \t2023-02-24 00:00:00 \tstd = 39.08 \tmean = 133.03 \tlower = 54.87 \t\tupper = 211.2\n",
            "t+41 \t2023-02-27 00:00:00 \tstd = 39.64 \tmean = 133.29 \tlower = 54.01 \t\tupper = 212.56\n",
            "t+42 \t2023-02-28 00:00:00 \tstd = 40.23 \tmean = 133.55 \tlower = 53.1 \t\tupper = 214.0\n",
            "t+43 \t2023-03-01 00:00:00 \tstd = 40.81 \tmean = 133.8 \tlower = 52.19 \t\tupper = 215.42\n",
            "t+44 \t2023-03-02 00:00:00 \tstd = 41.38 \tmean = 134.06 \tlower = 51.31 \t\tupper = 216.81\n",
            "t+45 \t2023-03-03 00:00:00 \tstd = 41.94 \tmean = 134.32 \tlower = 50.44 \t\tupper = 218.2\n",
            "t+46 \t2023-03-06 00:00:00 \tstd = 42.52 \tmean = 134.58 \tlower = 49.54 \t\tupper = 219.62\n",
            "t+47 \t2023-03-07 00:00:00 \tstd = 43.08 \tmean = 134.84 \tlower = 48.67 \t\tupper = 221.01\n",
            "t+48 \t2023-03-08 00:00:00 \tstd = 43.64 \tmean = 135.11 \tlower = 47.83 \t\tupper = 222.39\n",
            "t+49 \t2023-03-09 00:00:00 \tstd = 44.2 \tmean = 135.38 \tlower = 46.97 \t\tupper = 223.78\n",
            "t+50 \t2023-03-10 00:00:00 \tstd = 44.77 \tmean = 135.64 \tlower = 46.1 \t\tupper = 225.18\n",
            "t+51 \t2023-03-13 00:00:00 \tstd = 45.33 \tmean = 135.9 \tlower = 45.24 \t\tupper = 226.56\n",
            "t+52 \t2023-03-14 00:00:00 \tstd = 45.89 \tmean = 136.17 \tlower = 44.38 \t\tupper = 227.96\n",
            "t+53 \t2023-03-15 00:00:00 \tstd = 46.44 \tmean = 136.43 \tlower = 43.56 \t\tupper = 229.31\n",
            "t+54 \t2023-03-16 00:00:00 \tstd = 46.99 \tmean = 136.71 \tlower = 42.73 \t\tupper = 230.69\n",
            "t+55 \t2023-03-17 00:00:00 \tstd = 47.53 \tmean = 136.97 \tlower = 41.9 \t\tupper = 232.04\n",
            "t+56 \t2023-03-20 00:00:00 \tstd = 48.1 \tmean = 137.25 \tlower = 41.05 \t\tupper = 233.44\n",
            "t+57 \t2023-03-21 00:00:00 \tstd = 48.64 \tmean = 137.51 \tlower = 40.23 \t\tupper = 234.79\n",
            "t+58 \t2023-03-22 00:00:00 \tstd = 49.17 \tmean = 137.78 \tlower = 39.44 \t\tupper = 236.11\n",
            "t+59 \t2023-03-23 00:00:00 \tstd = 49.72 \tmean = 138.05 \tlower = 38.62 \t\tupper = 237.48\n",
            "t+60 \t2023-03-24 00:00:00 \tstd = 50.28 \tmean = 138.32 \tlower = 37.77 \t\tupper = 238.88\n",
            "t+61 \t2023-03-27 00:00:00 \tstd = 50.83 \tmean = 138.61 \tlower = 36.94 \t\tupper = 240.28\n",
            "t+62 \t2023-03-28 00:00:00 \tstd = 51.38 \tmean = 138.88 \tlower = 36.12 \t\tupper = 241.65\n",
            "t+63 \t2023-03-29 00:00:00 \tstd = 51.93 \tmean = 139.15 \tlower = 35.3 \t\tupper = 243.01\n",
            "t+64 \t2023-03-30 00:00:00 \tstd = 52.47 \tmean = 139.42 \tlower = 34.47 \t\tupper = 244.37\n",
            "t+65 \t2023-03-31 00:00:00 \tstd = 53.0 \tmean = 139.68 \tlower = 33.68 \t\tupper = 245.69\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Output"
      ],
      "metadata": {
        "id": "jnjxc7OuMTxe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Simulation:\\tFrom {} to {}; Business days={}\".format(date_t0, date_tn, np.busday_count(date_t0, date_tn)))\n",
        "print(\"\\nOn t+{}:\\tExpected price interval = [{}, {}]\".format(np.busday_count(date_t0, date_tn), round(lower_bounds[len(lower_bounds)-1],2),round(upper_bounds[len(upper_bounds)-1],2)))\n",
        "print(\"\\nOn t+{}:\\tExpected average price = {}\".format(np.busday_count(date_t0, date_tn), round(center_ln[len(center_ln)-1],2)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hKQ-AtCqNs5D",
        "outputId": "31bcdde6-6cb7-4a54-d198-7cbc5dadb81c"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Simulation:\tFrom 2022-12-31 to 2023-03-31; Business days=64\n",
            "\n",
            "On t+64:\tExpected price interval = [33.68, 245.69]\n",
            "\n",
            "On t+64:\tExpected average price = 139.68\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(16,8))\n",
        "plt.plot(upper_bounds, label=\"Projected Mean + 2 * stdev.\", color=\"red\")\n",
        "plt.plot(center_ln, label=\"Projected Mean\", color=\"blue\")\n",
        "plt.plot(lower_bounds, label=\"Projected Mean - 2 * stdev.\", color=\"green\")\n",
        "plt.legend()\n",
        "plt.ylabel(\"Projected price\")\n",
        "plt.xlabel(\"t0 + No. of business days\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        },
        "id": "hgVDqfMwIt1I",
        "outputId": "e52282f2-2578-4639-f23e-db1bff0974b2"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<br>\n",
        "<br>\n",
        "<br>\n",
        "<br>\n",
        "\n",
        "---\n",
        "**References:**\n",
        "\n",
        "[1] E. Bukaçi, Th. Korini, E. Periku, S. Allkja and P. Sheperi (2016). Number of iterations needed in Monte Carlo Simulation using reliability analysis for tunnel supports. [online] https://www.ijera.com. Available at: https://www.ijera.com/papers/Vol6_issue6/Part%20-%203/J0606036064.pdf."
      ],
      "metadata": {
        "id": "lpZrKjiDUl9O"
      }
    }
  ]
}